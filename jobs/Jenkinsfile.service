#!/usr/bin/env groovy

pipeline {
    /* insert Declarative Pipeline here */
    agent any
    options { 
        timestamps()
        disableConcurrentBuilds()
        buildDiscarder logRotator(artifactNumToKeepStr: '', numToKeepStr: '10')
    }
    parameters {
        string defaultValue: 'Service', description: '', name: 'REPO', trim: true
        string defaultValue: 'master', description: '', name: 'BRANCH', trim: true
    }
    environment {
        GIT_URL = "https://github.com/gajendersingh1982"
        AWS_CREDS = credentials('AWS_badgedev')
        // AWS_ACCESS_KEY_ID=AWS_CREDS_USR
        // AWS_SECRET_ACCESS_KEY=AWS_CREDS_PSW
        AWS_DEFAULT_REGION="us-east-1"
    }
    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git url: env.GIT_URL + "/" + params.REPO + "/", branch: params.BRANCH, credentialsId: env.GIT_CREDENTIALS_ID
                sh 'echo $PWD'
            }
        }
        
        stage('init') {
            steps {
                sh '''
                cd ./service
                terraform init
                '''
            }
        }
        
        stage('terraform') {
            input {
                message 'Do you want to continue with build?'
                id 'APPROVER'
                ok 'Yes Proceed !'
                submitter 'Gajender'
                submitterParameter 'Approved By'
                parameters {
                    string defaultValue: '', description: '', name: 'Approved By', trim: true
                }
            }
            steps {
                sh '''
                terraform plan -var access_key=${AWS_CREDS_USR} -var secret_key=${AWS_CREDS_PSW}
                terraform apply -auto-approve -var access_key=${AWS_CREDS_USR} -var secret_key=${AWS_CREDS_PSW}
                '''
            }
        }
    }
}